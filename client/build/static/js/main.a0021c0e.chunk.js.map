{"version":3,"sources":["SearchBar.js","ShowResultsRow.js","ShowResults.js","ShowChart.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","handleChange","event","_this","props","textChange","react_default","a","createElement","Form","size","Segment","raised","Input","loading","this","fluid","icon","iconPosition","placeholder","onChange","React","Component","ShowResultsRow","getStatusColor","status","renderYear","firstAired","Date","parse","getFullYear","renderBanner","banner","Image","src","alt","seriesName","Placeholder","handleChartCreate","seriesId","chartButtonClick","_this2","Grid","celled","GridRow","GridColumn","stretched","width","Header","as","className","Label","color","Detail","network","overview","Button","primary","onClick","PureComponent","ShowResults","Container","showData","map","src_ShowResultsRow","key","id","ShowChart","customLabel","e","t","n","datasets","datasetIndex","r","index","label","labels","data","es","showRatingsData","height","options","maintainAspectRatio","legend","display","scales","yAxes","ticks","beginAtZero","max","xAxes","tooltips","callbacks","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSearchChange","setState","filteredShow","filterShow","target","value","debounce","searchText","showListLoading","chartData","axios","get","params","q","then","res","showList","includeChart","chart","keys","state","length","src_ShowChart","chartDataLoading","handleCreateChart","series_id","style","marginTop","src_SearchBar","src_ShowResults","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0021c0e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, Segment } from 'semantic-ui-react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n    handleChange = event => {\r\n        this.props.textChange(event);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Form size='large'>\r\n                <Segment raised>\r\n                    <Form.Input loading={this.props.loading} fluid icon='search' iconPosition='left' placeholder='TV Show Name' onChange={this.handleChange} />\r\n                </Segment>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nSearchBar.propTypes = {\r\n    textChange: PropTypes.func,\r\n    loading: PropTypes.bool\r\n};\r\n\r\nexport default SearchBar;","import React, { PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Image, Segment, Grid, GridColumn, GridRow, Header, Label, Placeholder, Button } from \"semantic-ui-react\";\r\n\r\nclass ShowResultsRow extends PureComponent {\r\n\r\n  getStatusColor = status => {\r\n    switch (status) {\r\n      case 'Ended':\r\n        return \"red\";\r\n      case 'Continuing':\r\n        return \"green\";\r\n      default:\r\n        return \"grey\";\r\n    }\r\n  }\r\n\r\n  renderYear = () => {\r\n    if (this.props.firstAired) {\r\n      var date = new Date(Date.parse(this.props.firstAired));\r\n      return ' (' + date.getFullYear() + ')';\r\n    }\r\n  }\r\n\r\n  renderBanner = () => {\r\n    if (this.props.banner) {\r\n      return <Image src={this.props.banner} size=\"small\" alt={this.props.seriesName} />\r\n    } else {\r\n      return <Placeholder><Placeholder.Image></Placeholder.Image></Placeholder>\r\n    }\r\n  }\r\n\r\n  handleChartCreate = seriesId => {\r\n    this.props.chartButtonClick(seriesId);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Segment raised>\r\n        <Grid celled>\r\n          <GridRow>\r\n            <GridColumn stretched width={3}>\r\n              {this.renderBanner()}\r\n            </GridColumn>\r\n            <GridColumn stretched width={13}>\r\n              <GridRow>\r\n                <Header as=\"h2\">\r\n                  {this.props.seriesName}\r\n                  <span className=\"year\">{this.renderYear()}</span>\r\n                  <span className=\"labels\">\r\n                    <Label color=\"grey\">\r\n                      Network\r\n                    <Label.Detail>{this.props.network}</Label.Detail>\r\n                    </Label>\r\n                    <Label color={this.getStatusColor(this.props.status)}>\r\n                      Status\r\n                    <Label.Detail>{this.props.status}</Label.Detail>\r\n                    </Label>\r\n                  </span>\r\n                </Header>\r\n              </GridRow>\r\n              <GridRow>\r\n                <span className=\"overview\">{this.props.overview}</span>\r\n              </GridRow>\r\n              <GridRow>\r\n                <Button primary onClick={() => {this.handleChartCreate(this.props.seriesId)}}>Create Chart</Button>\r\n              </GridRow>\r\n            </GridColumn>\r\n          </GridRow>\r\n        </Grid>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\nShowResultsRow.propTypes = {\r\n  chartButtonClick: PropTypes.func,\r\n  seriesId: PropTypes.number,\r\n  seriesName: PropTypes.string,\r\n  banner: PropTypes.string,\r\n  firstAired: PropTypes.string,\r\n  network: PropTypes.string,\r\n  status: PropTypes.string,\r\n  overview: PropTypes.string\r\n};\r\nexport default ShowResultsRow;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {  Container } from 'semantic-ui-react'\r\nimport ShowResultsRow from \"./ShowResultsRow\";\r\n\r\nclass ShowResults extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n          \r\n                {this.props.showData.map(showData => (\r\n                    <ShowResultsRow\r\n                    key={showData.id}\r\n                    seriesId={showData.id}\r\n                    seriesName={showData.seriesName}\r\n                    network={showData.network}\r\n                    firstAired={showData.firstAired}\r\n                    banner={showData.banner}\r\n                    status={showData.status}\r\n                    overview={showData.overview}\r\n                    chartButtonClick={this.props.chartButtonClick}\r\n                    />\r\n                ))}\r\n            \r\n      </Container>\r\n    );\r\n  }\r\n}\r\nShowResults.propTypes = {\r\n  chartButtonClick: PropTypes.func,\r\n    showData: PropTypes.array\r\n};\r\nexport default ShowResults;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {  Container, Placeholder } from 'semantic-ui-react'\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nclass ShowChart extends React.Component {\r\n\r\n    // renderChart = () => {\r\n    //     if (this.props.loading) {\r\n    //         return (<Placeholder>\r\n    //             <Placeholder.Image square />\r\n    //         </Placeholder>)\r\n    //     } else {\r\n    //         if (this.props.showRatingsData.length > 0) {\r\n    //             return (\r\n    //                 <div>\r\n    //                     <Line\r\n    //                     data={this.props.showRatingsData}\r\n    //                     width={650}\r\n    //                     height={250}\r\n    //                     options={{\r\n    //                         maintainAspectRatio: false\r\n    //                     }}\r\n    //                     />\r\n    //                 </div>\r\n    //             )\r\n    //         }\r\n    //     }\r\n    // }\r\n    customLabel = (e, t) => {\r\n        var n=t.datasets[e.datasetIndex],r=e.index;\r\n        return n.label+\": \"+n.labels[r]+\" | Rating: \"+n.data[r]\r\n    };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n          {/* {this.renderChart()} */}\r\n          <Bar\r\n            \r\n                        data={this.props.showRatingsData}\r\n                        width={650}\r\n                        height={250}\r\n                        options={{\r\n                            maintainAspectRatio: false,\r\n                            legend: {\r\n                                display: false\r\n                            },\r\n                            scales: {\r\n                                yAxes: [{\r\n                                    ticks: {\r\n                                        beginAtZero: true,\r\n                                        max: 10\r\n                                    }\r\n                                }],\r\n                                xAxes: [{\r\n                                    ticks: {\r\n                                        beginAtZero: true,\r\n                                        max: 10\r\n                                    }\r\n                                }]\r\n                            },\r\n                            tooltips: {\r\n                                callbacks: {\r\n                                    label: this.customLabel\r\n                                }\r\n                            }\r\n\r\n                        }}\r\n                        />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\nShowChart.propTypes = {\r\n    loading: PropTypes.bool,\r\n    showRatingsData: PropTypes.object\r\n};\r\nexport default ShowChart;","import React from 'react';\nimport './App.css';\nimport { Container, Header } from 'semantic-ui-react'\nimport SearchBar from './SearchBar';\nimport ShowResults from './ShowResults';\nimport ShowChart from './ShowChart';\nimport axios from 'axios/index';\nimport { debounce } from 'lodash';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filteredShow: '',\n      showList: [],\n      chartData: {},\n      showListLoading: false,\n      chartDataLoading: false\n    };\n  }\n\n  // Search functions\n  handleSearchChange = event => {\n    this.setState({\n      filteredShow: this.filterShow(event.target.value, 20)\n    });\n  };\n\n  filterShow = debounce((searchText) => {\n    this.setState({ showListLoading: true });\n    this.setState({ chartData: {}});\n    axios.get('/api/search', {\n      params: {\n        q: searchText\n      }\n    })\n      .then((res) => {\n        if (res.data) {\n          this.setState({ showList: res.data });\n          this.setState({ showListLoading: false });\n        }\n      })\n  }, 1000);\n\n  // Chart creation functions\n  includeChart = () => {\n    var chart;\n    if (Object.keys(this.state.chartData).length !== 0) {\n      chart = <ShowChart showRatingsData={this.state.chartData} loading={this.state.chartDataLoading}  />;\n    }\n    return chart;\n  }\n\n  handleCreateChart = seriesId => {\n    this.setState({ showList: []});\n    this.setState({ chartDataLoading: true });\n    \n    axios.get('/api/graph2', {\n      params: {\n        series_id: seriesId\n      }\n    })\n      .then((res) => {\n        if (res.data) {\n          this.setState({ chartData: res.data });\n          this.setState({ chartDataLoading: false });\n        }\n      })\n  };\n\n  render() {\n    return (\n      <Container style={{ marginTop: '3em' }}>\n        <Header as='h1'>TV Show Ratings Graph Creator</Header>\n\n        <SearchBar textChange={this.handleSearchChange} loading={this.state.showListLoading} />\n        <p></p>\n        <ShowResults showData={this.state.showList} chartButtonClick={this.handleCreateChart} marginTop=\"1em\" />\n        <p></p>\n        {/* Only render the chart if it has data, otherwise it'll error, and is needless */}\n        { this.includeChart() }\n        \n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}